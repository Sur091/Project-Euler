import numpy as np
def increasing_numbers(power_of_ten):
    ending_with = np.array([0, 1, 1, 1, 1, 1, 1, 1, 1, 1])
    total = np.sum(ending_with)
    for _ in range(power_of_ten-1):
        total += sum(ending_with[digit] * (10-digit) for digit in range(1, 10))
        ending_with = np.cumsum(ending_with)
    return total

def decreasing_numbers(power_of_ten):
    ending_with = np.array([0, 1, 1, 1, 1, 1, 1, 1, 1, 1])
    total = np.sum(ending_with)
    for _ in range(power_of_ten-1):
        total += sum(ending_with[digit] * (digit+1) for digit in range(10))
        ending_with = np.cumsum(ending_with[::-1])[::-1]
    return total

def non_bouncy_numbers(pow10):
    return increasing_numbers(pow10) + decreasing_numbers(pow10) - 9 * pow10

print(non_bouncy_numbers(100))
