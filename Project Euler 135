import numpy as np

def factors(n):
    pri = np.full(n+1, 1, int)
    pri[0] = 0

    for prime in range(2, n+1):
        if pri[prime] == 1:
            lst = np.full(int(n-prime)//prime+1, 2, int)
            prime0 = prime
            while prime0 < n:
                lst[prime0-1::prime0] += 1
                prime0 *= prime
            pri[prime::prime] *= lst
    return pri

def no_of_solutions(number):
    solutions = set()
    for a in range(1, int(number**0.5)+1):
        if number % a == 0:
            s, b = sorted((a, number//a))
            if (s+b) %  4 == 0:
                d = (b+s) // 4
                solutions.add((d, b))
                if s - d >0: solutions.add((d, s))
    return len(solutions)

number = 10**6-1
count = 0
for num, no_of_factors in enumerate(factors(number)):
    if num % 4 == 2 or no_of_factors < 10:
        continue
    if no_of_solutions(num) == 10:
        count += 1
print(count)
